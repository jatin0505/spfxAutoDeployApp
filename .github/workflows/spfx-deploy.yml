name: SPFx CICD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          npm ci
          npm i -g gulp

      - name: Bundle project
        run: gulp bundle --ship

      - name: Package solution
        run: gulp package-solution --ship

      - name: Install PNP
        shell: pwsh
        run: |
          Install-Module -Name PnP.PowerShell -AllowPrerelease -SkipPublisherCheck -AllowClobber -Scope CurrentUser -Force -AcceptLicense
      
      # Print the id of the app
      - name: Get the id of the app deployed
        run: echo "The site domain is ${{secrets.TENANT}} and client id is ${{secrets.APPCLIENTID}} and client secret is ${{secrets.APPSECRET}}"
        
      - name: Publish to development APP catalog
        shell: pwsh
        run: |
          Connect-PnPOnline -Url "https://ysgcg.sharepoint.com" -ClientId '${{secrets.APPCLIENTID}}' -ClientSecret '${{secrets.APPSECRET}}' 
          $catalogURL=Get-PnPTenantAppCatalogUrl
          Connect-PnPOnline -Url $catalogURL -ClientId '${{secrets.APPCLIENTID}}' -ClientSecret '${{secrets.APPSECRET}}'
          Add-PnPApp -Path ./sharepoint/solution/spfx-demo-app.sppkg -Publish -Overwrite

          $packageName = 'spfx-demo-app-client-side-solution'
          
          #Get All Communication Sites
          Get-PnPTenantSite -Template "SITEPAGEPUBLISHING#0" | ForEach-Object {
          
            Write-host -f Green "Communication site URL:"$_.URL
            
            $siteUrl = $_.URL
            Connect-PnPOnline -Url $siteUrl -ClientId '${{secrets.APPCLIENTID}}' -ClientSecret '${{secrets.APPSECRET}}'
            
            $currentPackage = Get-PnPApp -Identity $packageName -Scope Tenant            
            if($currentPackage.InstalledVersion -ne $null){
              Write-Host "Current package version on site $($siteUrl): $($currentPackage.InstalledVersion) and AppCatalogVersion: $($currentPackage.AppCatalogVersion)" 

                if ($currentPackage.InstalledVersion -ne $currentPackage.AppCatalogVersion) {
                  Write-Host "Upgrading package on site $($siteUrl) to latest version..." -ForegroundColor Green
                  Update-PnPApp -Identity $currentPackage.Id            
              } else {
                  Write-Host "Package already up-to-date on site $($siteUrl)."
              }
            }
            else {
              Write-Host "Package is not installed on site $($siteUrl)."
            }
          }
          Disconnect-PnPOnline
